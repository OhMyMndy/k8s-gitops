# this is altered from the kanister example in that
# we name our instances "postgresql" so there is no
# suffix to secrets
---
apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: bitnami-postgresql
actions:
  backup:
    kind: StatefulSet
    outputArtifacts:
      pgBackup:
        kopiaSnapshot: "{{ .Phases.pgDump.Output.kopiaOutput }}"
    phases:
    - func: KubeTask
      name: pgDump
      objects:
        pgSecret:
          kind: Secret
          name: 'postgresql'
          namespace: '{{ .StatefulSet.Namespace }}'
      args:
        image: zacheryph/postgres-kanister-tools:13.0.0
        namespace: '{{ .StatefulSet.Namespace }}'
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          export PGHOST='postgresql.{{ .StatefulSet.Namespace }}.svc.cluster.local'
          export PGUSER='postgres'
          export PGPASSWORD='{{ index .Phases.pgDump.Secrets.pgSecret.Data "postgresql-password" | toString }}'
          FILE_PATH=backup.sql
          pg_dumpall --clean -U $PGUSER | kando location push --profile '{{ toJson .Profile }}' --path "$FILE_PATH" --output-name "kopiaOutput" -

  restore:
    kind: StatefulSet
    inputArtifactNames:
    - pgBackup
    phases:
    - func: KubeTask
      name: pgRestore
      objects:
        pgSecret:
          kind: Secret
          name: 'postgresql'
          namespace: '{{ .StatefulSet.Namespace }}'
      args:
        image: zacheryph/postgres-kanister-tools:13.0.0
        namespace: '{{ .StatefulSet.Namespace }}'
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          export PGHOST='postgresql.{{ .StatefulSet.Namespace }}.svc.cluster.local'
          export PGUSER='postgres'
          export PGPASSWORD='{{ index .Phases.pgRestore.Secrets.pgSecret.Data "postgresql-password" | toString }}'
          FILE_PATH="backup.sql"
          KOPIA_SNAP='{{ .ArtifactsIn.pgBackup.KopiaSnapshot }}'
          kando location pull --profile '{{ toJson .Profile }}' --path "$FILE_PATH" --kopia-snapshot "$KOPIA_SNAP" | psql -q -U "$PGUSER"

  delete:
    inputArtifactNames:
    - pgBackup
    phases:
    - func: KubeTask
      name: deleteDump
      args:
        image: zacheryph/postgres-kanister-tools:13.0.0
        namespace: "{{ .Namespace.Name }}"
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          FILE_PATH="backup.sql"
          KOPIA_SNAP='{{ .ArtifactsIn.pgBackup.KopiaSnapshot }}'
          kando location delete --profile '{{ toJson .Profile }}' --path "$FILE_PATH" --kopia-snapshot "$KOPIA_SNAP"
